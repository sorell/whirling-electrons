// SSD1331 | ARDUINO NANO
//     GDN | GDN
//     VCC | 3V3
//     SCL | D13 (sclk)
//     SDA | D11 (mosi)
//     RES | D8
//      DC | D9
//      CS | D10

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1331.h>
#include <avr/pgmspace.h>
#include <SPI.h>
#include "softTimer.h"
#include "btnDebounce.h"


// Display: you can use any 5 pins 
#define SCLK_PIN 13
#define MOSI_PIN 11
#define CS_PIN   10
#define RST_PIN  9
#define DC_PIN   8

#define BTNUP_PIN 2
#define BTNDN_PIN 3
#define BUZZER_PIN 6

// Color definitions
//
//  -----------------------------------------------------------------
// | RED                 | GREEN               | BLUE                |
// |-----------------------------------------------------------------|
// | 5 bits              | 6 bits              | 5 bits              |
// | (0-31) << 11        | (0-63) << 6         | (0-31) << 0         |
// | 0b11111000 00000000 | 0b00000111 11100000 | 0b00000000 00011111 |
// | 0xF8000             | 0x07E0              | 0x001F              |
//  -----------------------------------------------------------------

uint8_t toRed(uint16_t const color) { return (color >> 11) & 0x1f; }
uint8_t toGreen(uint16_t const color) { return (color >> 5) & 0x3f; }
uint8_t toBlue(uint16_t const color) { return color & 0x1f; }
uint16_t toColor(uint16_t const r, uint16_t const g, uint16_t const b) { return (r << 11) | (g << 5) | b; }

#define	BLACK      0x0000
#define	BLUE       0x001F
#define	RED        0xF800
#define	GREEN      0x07E0
#define CYAN       0x07FF
#define MAGENTA    0xF81F
#define YELLOW     0xFFE0
#define ORANGE     0xFA40
#define WHITE      0xFFFF


#include <stdint.h>
#include <avr/pgmspace.h>

// 4-bit picture data extracted from file teacup1.bmp
int constexpr teacupPicWidth = 46;
int constexpr teacupPicHeight = 27;
static uint8_t const PROGMEM teacupPicData[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x12, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x10, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x12, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x12, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x12, 0x11, 0x31, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x01, 0x00, 0x30, 0x11, 0x11, 0x01, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x10, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x11, 0x11, 0x00, 0x01, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x01, 0x10, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x01, 0x10, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x01, 0x10, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x01, 0x10, 
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x11, 0x11, 0x33, 0x01, 
    0x00, 0x00, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x31, 0x33, 0x13, 0x00, 
    0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x11, 0x11, 0x01, 0x00, 
    0x00, 0x01, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x01, 0x00, 0x13, 0x00, 
    0x10, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x33, 0x01, 0x00, 0x33, 0x01, 
    0x10, 0x00, 0x00, 0x10, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x30, 0x01, 
    0x01, 0x00, 0x00, 0x00, 0x11, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x13, 0x01, 0x00, 0x00, 0x30, 0x13, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x11, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x13, 0x01, 0x00, 0x00, 0x00, 0x30, 0x13, 
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 
    0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x01, 
    0x00, 0x31, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x33, 0x13, 0x00, 
    0x00, 0x10, 0x11, 0x31, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0x13, 0x11, 0x01, 0x00, 
    0x00, 0x00, 0x00, 0x10, 0x11, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x11, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static uint16_t const teacupPicPalette[16] = {0x0000, 0xffff, 0xaaa0, 0xc618, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};


// 2-bit picture data extracted from file steam1.bmp
int constexpr steamPicWidth = 19;
int constexpr steamPicHeight = 12;
static uint8_t const PROGMEM steamPicData[] = {
    0x90, 0x00, 0x25, 0x40, 0x02, 
    0x24, 0x40, 0x02, 0x90, 0x00, 
    0x08, 0x90, 0x00, 0x24, 0x00, 
    0x08, 0x90, 0x00, 0x24, 0x00, 
    0x08, 0x90, 0x00, 0x24, 0x00, 
    0x24, 0x40, 0x02, 0x90, 0x00, 
    0x90, 0x00, 0x29, 0x40, 0x02, 
    0x40, 0x02, 0x90, 0x00, 0x09, 
    0x00, 0x09, 0x40, 0x02, 0x24, 
    0x00, 0x09, 0x40, 0x02, 0x24, 
    0x00, 0x09, 0x40, 0x02, 0x24, 
    0x40, 0x02, 0x90, 0x00, 0x09, 
};

static uint16_t const steamPicPalette[4] = {0x0000, 0xffff, 0xc618, 0xffff};


static Adafruit_SSD1331 display = Adafruit_SSD1331(CS_PIN, DC_PIN, RST_PIN);

static SoftTimer clockTimer(1000, 15);
static BtnDebounce upBtn(BTNUP_PIN, LOW, 20);
static BtnDebounce dnBtn(BTNDN_PIN, LOW, 20);
static uint8_t const width = display.width();
static uint8_t const height = display.height();
static uint8_t const radius = (int) width * 5 / 8;


void draw1bitData(uint8_t const *data, int w, int h)
{
	int const loops = w * h / 8;

	for(int i=loops; i; --i) {
		uint8_t byte = pgm_read_byte_near(data);
		for (int bit=8; bit; --bit) {
			display.writeColor((byte & 1) ? WHITE : BLACK, 1);
			byte >>= 1;
		}
		++data;
	}
}


void draw2bitData(uint8_t const *data, uint16_t const *palette, int w, int h)
{
	for (int row=h; row; --row) {
		for (int col=w; col>0; col-=4) {
			uint8_t byte = pgm_read_byte_near(data);
			switch(col) {
			default:
				display.writeColor(palette[byte & 0x3], 1);
				byte >>= 2;
			case 3:
				display.writeColor(palette[byte & 0x3], 1);
				byte >>= 2;
			case 2:
				display.writeColor(palette[byte & 0x3], 1);
				byte >>= 2;
			case 1:
				display.writeColor(palette[byte & 0x3], 1);
				break;
			}
			++data;
		}
	}
}


void draw4bitData(uint8_t const *data, uint16_t const *palette, int w, int h)
{
	for (int row=h; row; --row) {
		for (int col=w; col>0; col-=2) {
			uint8_t byte = pgm_read_byte_near(data);
			display.writeColor(palette[byte & 0xF], 1);
			if (col > 1) {
				display.writeColor(palette[byte >> 4], 1);
			}
			++data;
		}
	}
}


void draw16bitData(uint16_t const *data, int w, int h)
{
	int const loops = w * h;

	for (int i=0; i<loops; ++i) {
		display.writeColor(pgm_read_word_near(data), 1);
		data++;
	}
}


static void animateSteam(int offset, int x, int y)
{
	int const rowBytes = (steamPicWidth + 3) / 4;

	display.setAddrWindow(x, y, steamPicWidth, steamPicHeight);
	display.startWrite();
	draw2bitData(steamPicData + offset * rowBytes, steamPicPalette, steamPicWidth, steamPicHeight - offset);
	draw2bitData(steamPicData, steamPicPalette, steamPicWidth, offset);
	display.endWrite();
}


static bool checkButtons(void)
{
	if (upBtn.isPressed()) {
		int const toMax = 60 * 9 - clockTimer.shotsLeft();
		int const addMax15 = toMax > 15 ? 15 : toMax;
		clockTimer.reinit(clockTimer.shotsLeft() + addMax15);
		return true;
	}
	if (dnBtn.isPressed()) {
		clockTimer.reinit(clockTimer.shotsLeft() > 15 ? clockTimer.shotsLeft() - 15 : 0);
		return true;
	}
	return false;
}


static void drawTime(int time)
{
	static uint16_t const firstColor = GREEN;
	static uint16_t const lastColor = RED;
	static float const deltaRed = (float) (toRed(firstColor) - toRed(lastColor)) / 60.0f;
	static float const deltaGreen = (float) (toGreen(firstColor) - toGreen(lastColor)) / 60.0f;
	static float const deltaBlue = (float) (toBlue(firstColor) - toBlue(lastColor)) / 60.0f;

	float const factor = time > 60 ? 60 : time;
	uint16_t const color = toColor(toRed(lastColor) + (deltaRed * factor + 0.5f), toGreen(lastColor) + (deltaGreen * factor + 0.5f), toBlue(lastColor) + (deltaBlue * factor + 0.5f));

	if (time < 6) {
		for (uint8_t i=0; i<radius; i+=5) {
			display.fillCircle(width / 2, height / 2, i, color);
		}
	}

	display.fillScreen(BLACK);
	display.setTextColor(color);

	if (time < 6) {
		display.setTextSize(4);
		display.setCursor(40, 20);
		display.print(time);
	}
	else if (time > 0) {
		int const minutes = time / 60;
		time %= 60;
		int const secondTens = time / 10;
		time %= 10;
		int const secondUnits = time;

		display.setTextSize(4);
		display.setCursor(0, 20);
		display.print(minutes);
		display.print(':');
		display.print(secondTens);
		display.print(secondUnits);
	}
}


static void teacupAnimation(void)
{
	display.setAddrWindow(26, 25, teacupPicWidth, teacupPicHeight);
	display.startWrite();
	draw4bitData(teacupPicData, teacupPicPalette, teacupPicWidth, teacupPicHeight);
	display.endWrite();

	int heightOffset = 0;
	int cont = 1200;
	SoftTimer delayTimer;

	while (cont) {
		animateSteam(heightOffset, 39, 13);
		if (++heightOffset >= steamPicHeight) {
			heightOffset = 0;
		}
		--cont;
		delayTimer.init(100, SoftTimer::ONESHOT);
		while (!delayTimer.hasExpired()) {
			if (checkButtons()) {
				cont = 0;
				break;
			}
		}
	}

	display.fillScreen(BLACK);
}


void testDisplay(void)
{
	display.setAddrWindow(26, 25, teacupPicWidth, teacupPicHeight);
	display.startWrite();
	draw4bitData(teacupPicData, teacupPicPalette, teacupPicWidth, teacupPicHeight);
	display.endWrite();

	int heightOffset = 0;
	int cont = 30;
	while (--cont) {
		animateSteam(heightOffset, 39, 13);
		if (++heightOffset >= steamPicHeight) {
			heightOffset = 0;
		}
		delay(100);
	}

	display.fillScreen(BLACK);

#if 0
	display.setAddrWindow(0, 0, pictureWidth, pictureHeight);
	display.startWrite();
	// draw16bitData(pictureData, width, height);
	// draw4bitData(pictureData, picturePalette, pictureWidth-1, pictureHeight);
	// draw2bitData(pictureData, picturePalette, 0, 0, width, height);
	// draw1bitData(pictureData, 0, 0, width, height);
	display.endWrite();
#endif
}


void setup() {
	Serial.begin(115200);
	display.begin();
	display.fillScreen(BLACK);

	Serial.println("Hello World! Tea timer (c) Sami Sorell.");
	Serial.print("Display SSD1331 16-bit color OLED, resolution ");
	Serial.print(width);
	Serial.print("x");
	Serial.println(height);

	pinMode(BTNUP_PIN, INPUT_PULLUP);
	pinMode(BTNDN_PIN, INPUT_PULLUP);


	Serial.print("Pixels in display: ");
	Serial.println(width * height);

	pinMode(BUZZER_PIN, OUTPUT);

	int tones[6] = {262, 294, 330, 349, 440, 494};
	for (int i=0; i<6; ++i) {
		tone(BUZZER_PIN, tones[i]);
		delay(500);
	}
	noTone(BUZZER_PIN);
	while (1);
	// tone(BUZZER_PIN, 4000);

	// while (1) {
	// 	delay(2);
	// 	digitalWrite(BUZZER_PIN, HIGH);
	// 	delay(2);
	// 	digitalWrite(BUZZER_PIN, LOW);
	// }


// 	while (1) {
// 		tone(BUZZER_PIN, 4000, 200);
// 		delay(200);
// 	}
}


void loop() {
	while (!clockTimer.hasExpired()) {
		if (checkButtons()) {
			break;
		}
	}

	// When shotsLeft() == 0 no number is drawn, but the red circle effect is
	drawTime(clockTimer.shotsLeft());
	
	if (clockTimer.shotsLeft() == 0) {
		clockTimer.reinit(0);
		teacupAnimation();

		// If button was pressed during teacupAnimation() and clockTimer was changed
		if (clockTimer.shotsLeft() > 0) {
			drawTime(clockTimer.shotsLeft());
		}
	}
}

